<?php

namespace App\Http\Controllers;

u            // Create transaction record
            $orderId = 'BOOKING-' . time() . '-' . rand(1000, 9999);
            $transaction = Transaction::create([
                'order_id' => $orderId,
                'apartment_id' => $validatedData['apartment_id'],
                'customer_name' => $validatedData['customer_name'],
                'customer_email' => $validatedData['customer_email'],
                'check_in' => $validatedData['check_in'],
                'check_out' => $validatedData['check_out'],
                'nights' => $validatedData['nights'],
                'amount' => $validatedData['amount'],
                'payment_method' => $validatedData['payment_method'],
                'payment_provider' => $validatedData['payment_provider'],
                'notes' => $validatedData['notes'],
                'booking_data' => [
                    'apartment_id' => $validatedData['apartment_id'],
                    'apartment_name' => $request->apartment_name ?? 'Apartemen',
                    'guest_name' => $validatedData['customer_name'],
                    'guest_email' => $validatedData['customer_email'],
                    'guest_phone' => $request->customer_phone ?? 'N/A',
                    'check_in_date' => $validatedData['check_in'],
                    'check_out_date' => $validatedData['check_out'],
                    'guests' => $request->guests ?? 1,
                    'duration' => $validatedData['nights'],
                    'total_price' => $validatedData['amount'],
                    'special_requests' => $validatedData['notes'],
                    'payment_method' => $validatedData['payment_method'],
                    'payment_provider' => $validatedData['payment_provider'],
                ]
            ]);Transaction;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Inertia\Inertia;
use Midtrans\Config;
use Midtrans\Snap;
use Midtrans\Transaction as MidtransTransaction;

class PaymentController extends Controller
{
    public function createPayment(Request $request)
    {
        try {
            Log::info('Payment request received', [
                'all_data' => $request->all(),
                'payment_method' => $request->payment_method,
                'payment_provider' => $request->payment_provider,
                'customer_email' => $request->customer_email,
                'customer_email_type' => gettype($request->customer_email)
            ]);
            
            // Validate request
            $validatedData = $request->validate([
                'apartment_id' => 'required|exists:apartments,id',
                'customer_name' => 'required|string',
                'customer_email' => 'required|email',
                'check_in' => 'required|date',
                'check_out' => 'required|date|after:check_in',
                'payment_method' => 'required|in:qris,ewallet,va,cstore,akulaku',
                'payment_provider' => 'nullable|string',
                'amount' => 'required|numeric',
                'nights' => 'required|integer|min:1',
                'notes' => 'nullable|string'
            ]);
            
            Log::info('Validation passed', $validatedData);
            
            // Create transaction record
            $transaction = Transaction::create([
                'order_id' => 'BOOKING-' . time() . '-' . rand(1000, 9999),
                'apartment_id' => $validatedData['apartment_id'],
                'customer_name' => $validatedData['customer_name'],
                'customer_email' => $validatedData['customer_email'],
                'check_in' => $validatedData['check_in'],
                'check_out' => $validatedData['check_out'],
                'nights' => $validatedData['nights'],
                'amount' => $validatedData['amount'],
                'payment_method' => $validatedData['payment_method'],
                'payment_provider' => $validatedData['payment_provider'],
                'notes' => $validatedData['notes'],
            ]);
            
            Log::info('Transaction created', ['transaction_id' => $transaction->id]);
            
            // Prepare booking data for Midtrans
            $bookingData = [
                'apartment' => [
                    'id' => $validatedData['apartment_id'],
                    'name' => $request->apartment_name ?? 'Apartemen',
                    'price' => ($validatedData['amount'] - 25000) / $validatedData['nights'], // excluding service fee
                ],
                'name' => $validatedData['customer_name'],
                'email' => $validatedData['customer_email'],
                'totalPrice' => $validatedData['amount'],
                'nights' => $validatedData['nights'],
                'paymentMethod' => $validatedData['payment_method'],
                'paymentProvider' => $validatedData['payment_provider'],
            ];
            
            Log::info('Booking data prepared', $bookingData);
            
            // Create Midtrans transaction - setup config and create transaction
            $this->setupMidtransConfig();
            $midtransResult = $this->createBookingTransaction($bookingData);
            
            Log::info('Midtrans result', $midtransResult);

            if ($midtransResult['success']) {
                // Update transaction with snap token
                $transaction->update([
                    'snap_token' => $midtransResult['snap_token'],
                    'midtrans_response' => $midtransResult
                ]);

                return response()->json([
                    'success' => true,
                    'transaction_id' => $transaction->id,
                    'order_id' => $transaction->order_id,
                    'snap_token' => $midtransResult['snap_token'],
                    'redirect_url' => $midtransResult['redirect_url']
                ]);
            } else {
                Log::error('Midtrans failed', $midtransResult);
                return response()->json([
                    'success' => false,
                    'message' => $midtransResult['message']
                ], 400);
            }
            
        } catch (\Illuminate\Validation\ValidationException $e) {
            Log::error('Validation failed', $e->errors());
            return response()->json([
                'success' => false,
                'message' => 'Validation failed',
                'errors' => $e->errors()
            ], 422);
        } catch (\Exception $e) {
            Log::error('Exception in createPayment', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);
            
            return response()->json([
                'success' => false,
                'message' => 'Payment processing failed: ' . $e->getMessage(),
                'debug' => [
                    'file' => $e->getFile(),
                    'line' => $e->getLine()
                ]
            ], 500);
        }
    }

    public function handleNotification(Request $request)
    {
        $orderId = $request->order_id;
        $statusCode = $request->status_code;
        $grossAmount = $request->gross_amount;
        $serverKey = config('midtrans.server_key');
        
        // Create signature key
        $signatureKey = hash('sha512', $orderId . $statusCode . $grossAmount . $serverKey);
        
        // Verify signature
        if ($signatureKey !== $request->signature_key) {
            return response()->json(['message' => 'Invalid signature'], 403);
        }

        // Find transaction
        $transaction = Transaction::where('order_id', $orderId)->first();
        
        if (!$transaction) {
            return response()->json(['message' => 'Transaction not found'], 404);
        }

        // Update transaction status based on Midtrans response
        $transactionStatus = $request->transaction_status;
        
        switch ($transactionStatus) {
            case 'capture':
            case 'settlement':
                $transaction->status = 'settlement';
                break;
            case 'pending':
                $transaction->status = 'pending';
                break;
            case 'deny':
                $transaction->status = 'deny';
                break;
            case 'expire':
                $transaction->status = 'expire';
                break;
            case 'cancel':
                $transaction->status = 'cancel';
                break;
            default:
                $transaction->status = 'failure';
                break;
        }

        $transaction->midtrans_response = $request->all();
        $transaction->save();

        return response()->json(['message' => 'OK']);
    }

    public function checkStatus(Request $request, $orderId)
    {
        $transaction = Transaction::where('order_id', $orderId)->first();
        
        if (!$transaction) {
            return response()->json(['message' => 'Transaction not found'], 404);
        }

        // Check status from Midtrans
        $this->setupMidtransConfig();
        $statusResult = $this->getTransactionStatus($orderId);
        
        if ($statusResult['success']) {
            $midtransStatus = $statusResult['data'];
            $transactionStatus = is_array($midtransStatus) ? $midtransStatus['transaction_status'] : $midtransStatus->transaction_status;
            
            // Update local transaction status
            switch ($transactionStatus) {
                case 'capture':
                case 'settlement':
                    $transaction->status = 'settlement';
                    break;
                case 'pending':
                    $transaction->status = 'pending';
                    break;
                case 'deny':
                    $transaction->status = 'deny';
                    break;
                case 'expire':
                    $transaction->status = 'expire';
                    break;
                case 'cancel':
                    $transaction->status = 'cancel';
                    break;
                default:
                    $transaction->status = 'failure';
                    break;
            }
            
            $transaction->midtrans_response = is_array($midtransStatus) ? $midtransStatus : (array) $midtransStatus;
            $transaction->save();
        }

        return response()->json([
            'success' => true,
            'transaction' => $transaction,
            'midtrans_data' => $statusResult['success'] ? $statusResult['data'] : null
        ]);
    }
    
    private function setupMidtransConfig()
    {
        Config::$serverKey = config('midtrans.server_key');
        Config::$isProduction = config('midtrans.is_production');
        Config::$isSanitized = config('midtrans.is_sanitized');
        Config::$is3ds = config('midtrans.is_3ds');
    }
    
    private function createBookingTransaction($bookingData)
    {
        try {
            $transactionId = 'BOOKING-' . time() . '-' . random_int(1000, 9999);
            
            $params = [
                'transaction_details' => [
                    'order_id' => $transactionId,
                    'gross_amount' => $bookingData['totalPrice'],
                ],
                'customer_details' => [
                    'first_name' => $bookingData['name'],
                    'email' => $bookingData['email'],
                    'phone' => $bookingData['phone'] ?? '',
                ],
                'enabled_payments' => ['qris', 'gopay', 'shopeepay', 'dana', 'linkaja', 'bca_va', 'bni_va', 'bri_va', 'mandiri_va', 'alfamart', 'indomaret', 'akulaku']
            ];
            
            Log::info('Creating Midtrans transaction', $params);
            
            $snapToken = Snap::getSnapToken($params);
            
            Log::info('Midtrans snap token created', ['snap_token' => $snapToken]);
            
            return [
                'success' => true,
                'snap_token' => $snapToken,
                'redirect_url' => 'https://app.sandbox.midtrans.com/snap/v2/vtweb/' . $snapToken
            ];
        } catch (\Exception $e) {
            Log::error('Midtrans transaction failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'success' => false,
                'message' => $e->getMessage()
            ];
        }
    }
    
    private function getTransactionStatus($orderId)
    {
        try {
            $status = MidtransTransaction::status($orderId);
            return [
                'success' => true,
                'data' => $status
            ];
        } catch (\Exception $e) {
            Log::error('Get transaction status error: ' . $e->getMessage());
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }
}
